#!/bin/sh

scratch() {


  # Variables
  # ----------------------------------------------------------------------------
  local version='0.0.1'
  local scratch_dir=${SCRATCH_DIR:-"$HOME/scratches"}
  local dot_scratch_dir="$HOME/.scratch/repos"


  # Local Functions
  # ----------------------------------------------------------------------------
  _random_char() {
    local random_number=$(_random_number)
    local random_index=$(( $random_number % $# + 1 ))
    # this eval is okay because there is no scope for code injection
    # and the function is unset at the end
    eval "printf '%s' \${$random_index}"
  }

  _random_number() {
    printf '%s' $(od -An -tu -N2 /dev/urandom)
  }

  _random_word() {
    local word
    word=$word$(_random_char qu wh w r t y p ph d dr f g gr h j k kn l z c ch v b bl n m)
    word=$word$(_random_char a ai e ee ei ie oo o u)
    word=$word$(_random_char w r t y p s d ff g h k l c b n m)
    printf '%s' $word
  }

  _git_version_at_least() {
    local minor_git_version=$(git --version | sed 's/\(git version \)\([0-9]*\.[0-9]*\)\(.*\)/\2/')
    echo "$1 < $minor_git_version" | bc
  }

  _extract_repo_info() {
    local repo

    # will extract "username/repo" from the following:
    #
    # supercrabtree/kerpow
    # git@github.com:supercrabtree/kerpow.git
    # https://github.com/supercrabtree/kerpow
    # https://github.com/supercrabtree/kerpow/so/deep/nested/whatever
    # https://github.com/supercrabtree/kerpow.git

    # did they pass in a username/repo
    # i.e. supercrabtree/beepboop
    repo=$(printf %s $1 | sed -n 's/\(^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]\/[a-zA-Z0-9\-]*$\)/\1/p')
    if [ ! -z $repo ]; then
      printf '%s' $repo
      return 0
    fi

    # did they pass in an https git repo address
    # i.e. https://github.com/supercrabtree/beepboop.git                         = supercrabtree/beepboop
    # or   https://github.com/supercrabtree/beepboop                             = supercrabtree/beepboop
    # or   https://github.com/supercrabtree/beepboop/so/deep/nested/whatever     = supercrabtree/beepboop
    repo=$(printf %s $1 | sed -n 's/https\:\/\/github.com\/\([^\/]*\)\/\([^\.\/]*\)\(.*\)/\1\/\2/p')
    if [ ! -z $repo ]; then
      printf '%s' $repo
      return 0
    fi

    # did they pass in an ssh git repo address
    # i.e. git@github.com:supercrabtree/beepboop.git = supercrabtree/beepboop
    repo=$(printf %s $1 | sed -n 's/git@github.com:\([^\/]*\)\/\([^\/]*\)\.git/\1\/\2/p')
    if [ ! -z $repo ]; then
      printf '%s' $repo
      return 0
    fi

    return 1
  }

  _ensure_dir_exists() {
    local dir=$1

    # if its a dir
    if [ -d "$dir" ]; then

      # but not writable by this process
      if [ ! -w "$dir" ]; then
        printf "\nYour scratch directory %s is not writable. Try:\n" "$dir" 1>&2
        printf "  chmod +w %s\n" "$dir" 1>&2
        return 1
      fi

    # or it is not a directory
    else

      # but is instead a file
      if [ -f "$dir" ]; then
        printf "\nYour scratch directory %s is not a directory\n" "$dir" 1>&2
        return 1

      # or just doesn't exist
      else
        mkdir -p "$dir"
        if [ $? -eq 1 ]; then
          printf "\nFailed to create %s\n" "$dir" 1>&2
          return 1
        fi

        # success! directory now exists
        return 0
      fi
    fi
  }

  _scratch_local_scratch() {
    local to_scratch="$(printf $1 | sed -e 's/ /\//' -e 's/ /#/')"
    local slugged="$(printf $1 | sed -e 's/ /-/' -e 's/ /#/')"
    local name="$slugged-$(_random_word)"
    $(cd $scratch_dir && mkdir $name) || return 1
    cd "$scratch_dir/$name" && cp -R "$HOME/.scratch/repos/$to_scratch/" . && rm -rf .git
  }


  # Subcommands
  # ------------------------------------------------------------------------------
  _version() {
    printf '%s\n' $version
  }

  _help() {
    printf '%s\n' 'usage info is great'
  }

  _list() {
    find $dot_scratch_dir -mindepth 2 -maxdepth 2 -print0 | while IFS= read -r -d '' dir; do
      local username=$(basename $(dirname "$dir"))
      local repo=$(basename "$dir")
      printf '%s/%s\n' "$username" "$repo"
    done
  }

  _install() {
    local repo=$1
    local commit_ish=$2

    # Die if repo is empty
    if [ -z "$repo" ]; then
      printf '%s\n' "Erm, what do you want to install? (You need another parameter)" 1>&2
      return 1
    fi

    # Die if repo is a local folder
    if [ -d $repo ]; then
      printf '%s\n' "Stop the press!! it's a folder. Sorry not supported yet. Must be a remote repo for now." 1>&2
      return 1
    fi

    local repo_name=$(_extract_repo_info $repo)

    if [ -z $repo_name ]; then
      printf 'Could not find a repo matching %s\n' "$repo" 1>&2
      printf 'Run: scratch --help to see the supported formats\n' 1>&2
      return 1
    fi

    local repo_url="https://git::@github.com/$repo_name.git"

    if [ $(_git_version_at_least 2.3) -eq 1 ]; then
      # Git 2.3.0 introduced $GIT_TERMINAL_PROMPT
      # which can be used to suppress user prompt
      export GIT_TERMINAL_PROMPT=0
      repo_url="https://github.com/$repo_name.git"
    fi


    if [ ! -z $commit_ish ]; then
      git clone --recursive $repo_url "$dot_scratch_dir/$repo_name#$commit_ish"
      if [ $? -eq 0 ]; then
        $(cd "$dot_scratch_dir/$repo_name#$commit_ish"; git checkout --quiet $commit_ish)
        printf '\n%s\n  %s' "Successfully installed $repo_name#$repo_commit_ish. To use it right now:" "scratch $(basename $repo_name)"
      else
      fi
    else
      git clone --recursive $repo_url "$dot_scratch_dir/$repo_name"
      [ $? -eq 0 ] && printf '\n%s\n  %s' "Successfully installed $repo_name. To use it right now:" "scratch $(basename $repo_name)"
    fi
    return 0
  }

  _scratch_installed() {
    local installed name
    find "$HOME/.scratch/repos" -mindepth 2 -maxdepth 2 -print0 | while IFS= read -r -d '' dir; do
      local dirname=$(basename $(dirname "$dir"))
      local basename=$(basename "$dir" | sed 's/#/ /')
      installed="$installed$(echo -e '\n' $dirname $basename)"
    done
    matches=$(printf "$installed" | awk -v to_scratch="$1" '$2== to_scratch {printf "%s %s %s\\n", $1, $2, $3}')
    number_of_matches=$(printf "$matches" | wc -l)

    # trim whitespace
    matches=$(printf "$matches" | xargs)

    if [ "$number_of_matches" -eq 0 ]; then
      printf '%s\n  %s' "Couldn't find $1. Check what you have installed with:" "scratch list" 1>&2
      return 1
    fi

    if [ "$number_of_matches" -eq 1 ]; then
      _scratch_local_scratch $matches
    fi
  }


  _scratch () {
    local random_word=$(_random_word)
    _ensure_dir_exists "$scratch_dir" &&
      $(cd "$scratch_dir" && mkdir -p $random_word) &&
      cd "$scratch_dir/$random_word" &&
      return 0
    return 1
  }


  # Pass argv / run command
  # ------------------------------------------------------------------------------
  if [ "$#" -eq 0 ]; then
    _scratch
  else
    local command="$1"
    case "$command" in
      -v|--version) _version '0.0.1';;
      -h|--help)    _help;;
      list)         _list "$dot_scratch_dir";;
      install)      shift; _install "$@";;
      *)            _scratch_installed "$@";;
    esac
  fi

  local returncode=$?


  # Cleanup
  # ------------------------------------------------------------------------------
  unset -f _random_char
  unset -f _random_number
  unset -f _random_word
  unset -f _git_version_at_least
  unset -f _extract_repo_info
  unset -f _ensure_dir_exists
  unset -f _version
  unset -f _help
  unset -f _list
  unset -f _install
  unset -f _scratch_installed
  unset -f _scratch

  return returncode
}

